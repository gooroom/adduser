#!/usr/bin/perl

# deluser -- a utility to remove users from the system
$version = VERSION;

# Copyright (C) 2000 Roland Bauerschmidt <roland@copyleft.de>
# Based on 'adduser' as pattern by
#     Guy Maor <maor@debian.org>
#     Ted Hajek <tedhajek@boombox.micro.umn.edu>
#     Ian A. Murdock <imurdock@gnu.ai.mit.edu>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# the program can be called as:
#
#  deluser user
#     remove a normal user from the system
#     example: deluser mike
#     $action = "deluser"
#
#     --remove-home             remove the users home directory and mail spool
#     --remove-all-files        remove all files owned by user
#     --backup                  backup files before removing
#
#  delgroup group
#  deluser --group group
#     remove a system group from the system
#     example: deluser --group students
#     $action = "delgroup"
#
#  deluser user group
#     remove the user from a group
#     example: deluser mike students
#     $action = "deluserfromgroup"
#
#  general options:
#
#     --quiet | -q      don't give process information to stdout
#     --help | -h       usage message
#     --version | -v    version number and copyright
#     --conf | -c FILE  use FILE instead of /etc/deluser.conf      

BEGIN {
    eval 'use Locale::gettext';
    if ($@) {
        *gettext = sub { shift };
        *textdomain = sub { "" };
        *LC_MESSAGES = sub { 5 };
    }
    eval {
        require POSIX;
        import POSIX qw(setlocale);
    };
    if ($@) {
        *setlocale = sub { 1 };
    }
}

setlocale(LC_MESSAGES, "");
textdomain("deluser");

$verbose = 1;
$defaults = "/etc/deluser.conf";

$config{"remove_home"} = 0;
$config{"remove_all_files"} = 0;
$config{"backup"} = 0;

if(-x "/usr/bin/bzip2")
{
    $z_ext = ".bz2";
    $z_tar = "I";
}
elsif(-x "/bin/gzip")
{
    $z_ext = ".gz";
    $z_tar = "z";
}
else
{
    $z_ext = $z_tar = "";
}

$action = $0 =~ /delgroup$/ ? "delgroup" : "deluser";

while($arg = shift(@ARGV))
{
    die "$0: ",_("No options allowed after names.\n")
	if ($names[0] && $arg =~ /^--/);

    if($arg eq "--quiet" || $arg eq "-q")
    {
	$verbose = 0;
    }
    elsif($arg eq "--version" || $arg eq "-v")
    {
	version();
	exit 0;
    }
    elsif($arg eq "--help" || $arg eq "-h")
    {
	usage();
	exit 0;
    }
    elsif($arg eq "--group" || $arg eq "-g")
    {
	$action = "delgroup";
    }
    elsif($arg eq "--conf" || $arg eq "-c")
    {
        die "$0: ",_("--conf requires an argument.\n")
            if (!($defaults = shift(@ARGV)));
        dief (_("`%s' doesn't exist!\n"),$defaults)
            if (! -f $defaults);
    }
    elsif($arg eq "--remove-home")
    {
	$pconfig{"remove_home"} = 1;
    }
    elsif($arg eq "--remove-all-files")
    {
	$pconfig{"remove_all_files"} = 1;
    }
    elsif($arg eq "--backup")
    {
	$pconfig{"backup"} = 1;
    }
    elsif($arg =~ /^--/ || $arg =~ /^-/)
    {
	dief (_("Unknown argument `%s'.\n"),$arg);
    }
    else
    {
	push @names, $arg;
    }
}

read_config($defaults);
foreach(keys(%pconfig))
{
    $config{$_} = $pconfig{$_};
}

die "$0: ",_("Only root may remove a user or group from the system.\n") if ($> != 0);
 
if(@names == 0) {
    if($action eq "delgroup")
    {
	print _("Enter a groupname to remove: ");
    }
    else
    {
	print _("Enter a username to remove: ");
    }

    chomp($answer=<STDIN>);
    push(@names, $answer);
}
die "$0: ",_("I need a name to remove.\n") if (length($names[0]) == 0);
die "$0: ",_("No more than two names.\n") if (@names > 2);

if(@names == 2)       # must be addusertogroup
{
    die "$0: ",_("Specify only one name in this mode.\n")
        if ($action eq "delgroup");
    $action = "deluserfromgroup";
    $user = shift(@names);
    $group = shift(@names);
}
else
{
    if($action eq "delgroup")
    {
	$group = shift(@names);
    }
    else
    {
	$user = shift(@names);
    }
}

if($user)
{
    ($pw_name,$pw_passwd,$pw_uid,$pw_gid,$pw_quota,$pw_comment,
     $pw_gecos,$pw_homedir,$pw_shell,$pw_expire) = getpwnam($user);

    $maingroup = getgrgid($pw_gid);
}
if($group)
{
    ($gr_name,$gr_passwd,$gr_gid,$gr_members) = getgrnam($group);
}

# arguments are processed:
#
#  $action = "deluser"
#     $user          name of the user to remove
#
#  $action = "delgroup"
#     $group         name of the group to remove
#
#  $action = "deluserfromgroup"
#     $user          the user to be remove
#     $group         the group to remove him/her from


if($action eq "deluser")
{
    unless(exist_user($user))
    {
	dief (_("`%s' does not exist!\n"),$user);
    }
    
    if($config{"remove_home"} || $config{"remove_all_files"})
    {
	s_print(_("Searching for files to backup/remove...\n"));
	$files = "";
	if($config{"remove_home"} && ! $config{"remove_all_files"})
	{
	    $files = "$files $pw_homedir"
		if(-e $pw_homedir);
	    $files = "$files /var/mail/$user"
		if(-e "/var/mail/$user");
	}
	else
	{
	    $files = `find / -user $user ! -regex '/proc/.*'`;
	}

	if($config{"backup"})
	{
	    s_print(_("Backuping files to be removed...\n"));
	    systemcall("/bin/tar c$z_tar -f $user.tar$z_ext $files > /dev/null 2>&1");
	}

	if($files)
	{
	    s_print(_("Removing files...\n"));
	    systemcall("rm -rf $files > /dev/null 2>&1");
	}
    }

    s_printf(_("Removing user %s...\n"),$user);
    systemcall("userdel $user");

    systemcall('/usr/local/sbin/deluser.local', $user, $pw_uid,
                $pw_gid, $pw_homedir) if (-x "/usr/local/sbin/deluser.local");

    s_print(_("done.\n"));
}
elsif($action eq "delgroup")
{
    unless(exist_group($group))
    {
	dief (_("`%s' does not exist!\n"),$group);
    }
    if(system("grep ^.*:.*:.*:$gr_gid:.*:.*:.*\$ /etc/passwd > /dev/null 2>&1") == 0)
    {
	dief (_("There are users having `%s' as primary group!\n"),$group);
    }

    s_printf(_("Removing group %s...\n"),$group);
    systemcall("groupdel",$group);
    s_print(_("done.\n"));
}
elsif($action eq "deluserfromgroup")
{
    unless(exist_user($user))
    {
	dief (_("`%s' does not exist!\n"),$user);
    }
    unless(exist_group($group))
    {
	dief (_("`%s' does not exist!\n"),$group);
    }
    if($maingroup eq $group)
    {
	die "$0: ",_("You may not remove the user from his/her primary group.\n");
    }

    chomp(my $groups = `groups $user`);
    $groups =~ s/.*: *$maingroup //;
    my @groups = split(/ /,$groups);
    my $ingroup = 0;

    for($i = 0; $i <= $#groups; $i++)
    {
	if($groups[$i] eq $group)
	{
	    $ingroup = 1;
	    splice(@groups,$i,1);
	}
    }

    unless($ingroup)
    {
	dief(_("%s is not a member of group %s.\n"),$user,$group);
    }

    s_printf(_("Removing user %s from group %s...\n"),$user,$group);
    systemcall("usermod","-G", join(",",@groups), "$user" );
    s_print(_("done.\n"));
}


######

sub version
{
    printf("deluser: %s $version\n\n",_("removing user and groups from the system. Version:"));

    print("Copyright (C) 2000 Roland Bauerschmidt <roland\@copyleft.de>\n\n");

    print("deluser is based on adduser by Guy Maor <maor\@debian.org>, Ian Murdock\n",
	  "<imurdock\@gnu.ai.mit.edu> and Ted Hajek <tedhajek\@boombox.micro.umn.edu>\n");

    print("\nThis program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License, /usr/doc/copyright/GPL, for more details.\n");
}

sub usage
{
    printf("deluser: %s $version\n\n",_("removing user and groups from the system. Version:"));

    print("deluser user
  remove a normal user from the system
  example: deluser mike

  --remove-home             remove the users home directory and mail spool
  --remove-all-files        remove all files owned by user
  --backup                  backup files before removing

delgroup group
deluser --group group
  remove a system group from the system
  example: deluser --group students

deluser user group
  remove the user from a group
  example: deluser mike students

general options:
  --quiet | -q      don't give process information to stdout
  --help | -h       usage message
  --version | -v    version number and copyright
  --conf | -c FILE  use FILE instead of $defaults\n\n");

    printf(_("Global configuration is in the file %s.\n"), $defaults);    
}

sub exist_user
{
    my $exist_user = shift;
    return(getpwnam($exist_user) ne "");
}

sub exist_group
{
    my $exist_group = shift;
    return(getgrnam($exist_group) ne "");
}

sub read_config
{
    my ($conf_file) = @_;
    my ($var, $lcvar, $val);
    
    if (! -f $conf_file) {
        printf _("%s: %s doesn't exist.  Using defaults.\n"),$0,$conf_file if $verbose;
        return;
    }

    open (CONF, $conf_file) || dief("%s: %s\n",$conf_file,$!);
    while (<CONF>) {
        chomp;
        next if /^#/ || /^\s*$/;

        if ((($var, $val) = /^\s*(\S+)\s*=\s*(.*)/) != 2) {
            warnf(_("Couldn't parse %s:%s.\n"),$conf_file,$.);
            next;
        }
        $lcvar = lc $var;
        if (!defined($config{$lcvar})) {
            warnf(_("Unknown variable `%s' at %s:%s.\n"),$var,$conf_file,$.);
            next;
        }

        $val =~ s/^"(.*)"$/$1/;
        $val =~ s/^'(.*)'$/$1/;

        $config{$lcvar} = $val;
    }

    close CONF || die "$!";
}

sub systemcall
{
    my $c = join(' ', @_);
    print "$c\n" if $debugging;
    if (system(@_)) {
        die("$0: `$c' returned error code " . ($?>>8) . ".  Aborting.\n")
	    if ($?>>8);
        die("$0: `$c' exited from signal " . ($?&255) . ".  Aborting.\n");
    }
}

sub _
{
    return gettext("@_");
}

sub dief
{
    my ($form,@argu)=@_;
    printf STDERR "$0: $form",@argu;
    exit 1;
}

sub warnf {
    my ($form,@argu)=@_;
    printf STDERR "$0: $form",@argu;
}

sub s_print
{
    print join(" ",@_)
	if($verbose);
}

sub s_printf
{
    printf(@_)
	if($verbose);
}








